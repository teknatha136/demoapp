name: CD Pipeline (Deploy)

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-ci:
    name: Check CI Status
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    steps:
      - name: Check CI success
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
            echo "CI workflow failed. Stopping deployment."
            exit 1
          fi
          echo "CI workflow passed. Proceeding with deployment."

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [check-ci]
    if: always() && (needs.check-ci.result == 'success' || github.event_name == 'push')
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always() && needs.build-and-push.result == 'success'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate vulnerability report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image-tag }}
          format: 'table'
          output: 'vulnerability-report.txt'

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-report
          path: 'vulnerability-report.txt'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main' && needs.build-and-push.result == 'success'
    environment:
      name: staging
      url: https://staging.yourapp.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Deploy to staging
        run: |
          echo "Deploying image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Image digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # Add your deployment commands here
          # Example: kubectl set image deployment/app app=${{ needs.build-and-push.outputs.image-tag }}
          echo "âœ… Deployment to staging completed successfully"

      - name: Run smoke tests
        run: |
          echo "Running basic health checks..."
          # Add your smoke tests here
          # Example: curl -f https://staging.yourapp.com/health
          echo "âœ… Smoke tests passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') && needs.deploy-staging.result == 'success'
    environment:
      name: production
      url: https://yourapp.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Deploy to production
        run: |
          echo "Deploying image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Image digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # Add your production deployment commands here
          # Example: kubectl set image deployment/app app=${{ needs.build-and-push.outputs.image-tag }}
          echo "âœ… Deployment to production completed successfully"

      - name: Post-deployment validation
        run: |
          echo "Running post-deployment validation..."
          # Add your validation tests here
          # Example: curl -f https://yourapp.com/health
          echo "âœ… Post-deployment validation passed"

      - name: Notify team
        run: |
          echo "ðŸš€ Production deployment completed successfully!"
          echo "Tag: ${{ github.ref_name }}"
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          # Add notification logic here (Slack, email, etc.)

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Delete old images
        run: |
          echo "Cleaning up old Docker images..."
          # Add cleanup logic here
          # Example: Delete images older than 30 days
          echo "âœ… Cleanup completed"